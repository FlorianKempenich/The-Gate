#!/bin/bash
###################
## Global config ##
###################
CONTAINER_NAME=the-gate
GATE_SERVICES_CONFIG=/thegate/config/services.conf
GATE_DOCKER_IMAGE=floriankempenich/the-gate:debug


# Gate config
CONFIG_DIR=/thegate/config
CONFIG_DIR_IN_GATE=/etc/nginx/the-gate-services

LETSENCRYPT_CERT_NAME=thegate
LETSENCRYPT_DIR=/etc/letsencrypt
LETSENCRYPT_DIR_IN_GATE=/etc/letsencrypt

WEBROOT_DIR=/thegate/webroot
WEBROOT_DIR_IN_GATE=/thegate/webroot
# Gate config

#########################
## END - Global config ##
#########################

function cert-gen {
    # TODO: Hardcode cert-gen for now.
    # Offer help (and completion?) when implementing the python cli.
    domain="the-sandbox.access.ly"

    TMP_NGINX_CONTAINER=temp-nginx-for-certificate-generation

    docker run \
           --rm \
           --name $TMP_NGINX_CONTAINER \
           -v $WEBROOT_DIR:/usr/share/nginx/html:ro \
           -p 80:80 \
           -d nginx

    # TODO: Remove --dry-run
    CERTBOT_CMD="certonly \
            --webroot -w $WEBROOT_DIR \
            --cert-name $LETSENCRYPT_CERT_NAME \
            --dry-run \
            -d $domain"

    docker run \
           -it \
           --rm \
           --name certbot \
           -v "/etc/letsencrypt:/etc/letsencrypt" \
           -v "/var/lib/letsencrypt:/var/lib/letsencrypt" \
           -v $WEBROOT_DIR:$WEBROOT_DIR \
           certbot/certbot $CERTBOT_CMD

    docker kill $TMP_NGINX_CONTAINER
}
function cert-renew {
    echo Not implemented
}


########
## UP ##
########
### Utilities functions ###
function check_service_config_exist {
    printf "Checking that The-Gate service configuration exist . . . "
    if [ ! -f $GATE_SERVICES_CONFIG ]; then
        gateconfig_error "NOT FOUND"
        exit 1;
    fi
    printf "OK\n"
}
# function check_variable_set {
#     varname=$1
#     var=${!varname}
#
#     printf "Checking that configuration \`$varname\` is set . . . "
#     if [ -z "$var" ]; then
#         gateconfig_error "Variable NOT SET ==> $varname"
#         exit 1;
#     fi
#     printf "OK\n"
# }
function gateconfig_error {
    error_message=$1
    echo "The base configuration for The-Gate could not be found."
    echo "Please ensure the config exist and is properly formatted:"
    echo
    echo "    CONFIG LOCATION: $GATECONFIG"
    echo "    ERROR: $error_message"
    echo
    echo "For more info on how to create the config, refer to README.md."
}

function cleanup_trailing_slash { echo ${1%/}; }
function cleanup_leading_dotslash { echo ${1#./}; }
function full_path {
    echo $(cleanup_trailing_slash $1)/$(cleanup_leading_dotslash $2)
}

# function check_exist_on_host {
#     # Mounts the root on a docker image, and does the check on the image.
#     #
#     # That allow to check if file is present on Docker HOST,
#     # even when the HOST is a remote machine.
#     DESCRIPTION=$1
#     FILE=$2
#     printf "Checking that $DESCRIPTION exist on the HOST Machine . . . "
#     docker run --rm -v"/:/hostroot" alpine ls /hostroot$2 > /dev/null 2>&1
#     if ! [ "$?" == 0 ]; then
#         echo ""
#         echo "$DESCRIPTION: \`$FILE\` could not be found."
#         echo "==> Please check config! or Create the missing Directory/File!"
#         echo
#         exit 1
#     fi
#     printf "OK\n"
# }
### END - Utilities functions ###

### Main UP ###
## Load configuration ###########################################
function up {

    # TODO might wanna use the "on host" trick here for phase 4
    check_service_config_exist

    echo "Starting The-Gate on HOST"
    # Start The Gate
    docker run \
        -d \
        -p "80:80" \
        -p "443:443" \
        --network="host" \
        --restart=always \
        --name=$CONTAINER_NAME \
        \
        -e LETSENCRYPT_CERT_NAME=$LETSENCRYPT_CERT_NAME \
        -e CONFIG_DIR_IN_GATE=$CONFIG_DIR_IN_GATE \
        -e LETSENCRYPT_DIR_IN_GATE=$LETSENCRYPT_DIR_IN_GATE \
        -e WEBROOT_DIR_IN_GATE=$WEBROOT_DIR_IN_GATE \
        \
        -v $LETSENCRYPT_DIR:$LETSENCRYPT_DIR_IN_GATE \
        -v $CONFIG_DIR:$CONFIG_DIR_IN_GATE \
        -v $WEBROOT_DIR:$WEBROOT_DIR_IN_GATE \
        \
        $GATE_DOCKER_IMAGE

    if [ $? == '0' ]; then
        echo " ________________________________ "
        echo "|                                |"
        echo "| The-Gate started successfully! |"
        echo "|________________________________|"
    else
        echo " ___________________________________________________ "
        echo "|                                                   |"
        echo "| A problem happened while trying to start The-Gate |"
        echo "|___________________________________________________|"
        echo
    fi
}
##############
## END - UP ##
##############



##########
## DOWN ##
##########
function down {
    docker kill $CONTAINER_NAME && docker rm $CONTAINER_NAME

    if [ $? == '0' ]; then
        echo " ________________________________ "
        echo "|                                |"
        echo "| The-Gate stopped successfully! |"
        echo "|________________________________|"
    else
        echo " __________________________________________________ "
        echo "|                                                  |"
        echo "| A problem happened while trying to stop The-Gate |"
        echo "|__________________________________________________|"
        echo
    fi
}
################
## END - DOWN ##
################



##########
## Main ##
##########
function check_docker_installed {
    docker version >/dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo
      echo "/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\"
      echo "The Gate requires \`docker\`!"
      echo "Please ensure \`docker\` is installed"
      echo "/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\"
      echo
      exit 1
    fi
}
function check_running_as_root {
    if [[ $EUID -ne 0 ]]; then
        echo
        echo "/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\"
        echo "The Gate must be run as root!"
        echo "Please run as root, or use sudo"
        echo "/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\"
        echo
        exit 1
    fi
}
function create_directory_structure_if_not_exist {
    # TODO: Do this on remote machine for phase 4
    mkdir -p /thegate/webroot
    mkdir -p /thegate/config
    touch /thegate/config/services.conf
}

check_docker_installed
check_running_as_root
create_directory_structure_if_not_exist

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "cert" ]; then
    if [ "$2" == "gen" ]; then
        cert-gen
    elif [ "$2" == "renew" ]; then
        cert-renew
    else
        #TODO: Put option here
        echo "put help for 'cert' command here"
    fi
else
    # TODO: Update help with cert commands
    echo "Please select an option: \`up\` or \`down\`"
    echo
    echo "    \`thegate up\`   => Turn on The-Gate, and make your services securely available to the world!"
    echo "    \`thegate down\` => Turn off The-Gate"
    echo
    exit 1;
fi
################
## END - Main ##
################
